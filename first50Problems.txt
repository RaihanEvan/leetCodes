1. Two Sum

//Way1
class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i = 0; i<nums.length - 1; i++){
            int firstNum = nums[i];
            for(int j = i+1 ; j<nums.length ;j++){
                int secondNum = nums[j];
                if(firstNum + secondNum == target){
                    return new int[] {i,j};
                }
            }
        }
        return new int[] {};
    }
}

//Way2
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer,Integer> m = new HashMap<>();
        for(int i = 0; i< nums.length;i++){
            int complement = target - nums[i];
            if(m.containsKey(complement)){
                return new int[] {m.get(complement),i};
        
            }else{
                m.put(nums[i],i);
            }
        }
            return new int[]{};
    }
}
//way3(not working)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Arrays.sort(nums);
        int left = 0;
        int right = nums.length - 1;

        while(left<right){
            int currSum = nums[left] + nums[right];
            if(currSum == target){
                return new int[] {nums[left],nums[right]};
            }else if(currSum < target){
                left++;
            }else{
                right--;
            }
        }
        return new int[]{};
    }
}